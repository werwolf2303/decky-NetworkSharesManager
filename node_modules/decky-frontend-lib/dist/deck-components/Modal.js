import { findSP } from '../utils';
import { findModule, findModuleChild } from '../webpack';
const showModalRaw = findModuleChild((m) => {
    if (typeof m !== 'object')
        return undefined;
    for (let prop in m) {
        if (typeof m[prop] === 'function' &&
            m[prop].toString().includes('props.bDisableBackgroundDismiss') &&
            !m[prop]?.prototype?.Cancel) {
            return m[prop];
        }
    }
});
const oldShowModalRaw = findModuleChild((m) => {
    if (typeof m !== 'object')
        return undefined;
    for (let prop in m) {
        if (typeof m[prop] === 'function' && m[prop].toString().includes('bHideMainWindowForPopouts:!0')) {
            return m[prop];
        }
    }
});
export const showModal = (modal, parent, props = {
    strTitle: 'Decky Dialog',
    bHideMainWindowForPopouts: false,
}) => {
    if (showModalRaw) {
        return showModalRaw(modal, parent || findSP(), props.strTitle, props, undefined, {
            bHideActions: props.bHideActionIcons,
        });
    }
    else if (oldShowModalRaw) {
        return oldShowModalRaw(modal, parent || findSP(), props);
    }
    else {
        throw new Error('[DFL:Modals]: Cannot find showModal function');
    }
};
export const ConfirmModal = findModuleChild((m) => {
    if (typeof m !== 'object')
        return undefined;
    for (let prop in m) {
        if (!m[prop]?.prototype?.OK && m[prop]?.prototype?.Cancel && m[prop]?.prototype?.render) {
            return m[prop];
        }
    }
});
// new as of december 2022 on beta
export const ModalRoot = (Object.values(findModule((m) => {
    if (typeof m !== 'object')
        return false;
    for (let prop in m) {
        if (m[prop]?.m_mapModalManager && Object.values(m)?.find((x) => x?.type)) {
            return true;
        }
    }
    return false;
}) || {})?.find((x) => x?.type?.toString()?.includes('((function(){')) ||
    // before december 2022 beta
    Object.values(findModule((m) => {
        if (typeof m !== 'object')
            return false;
        for (let prop in m) {
            if (m[prop]?.toString()?.includes('"ModalManager","DialogWrapper"')) {
                return true;
            }
        }
        return false;
    }) || {})?.find((x) => x?.type?.toString()?.includes('((function(){')) ||
    // old
    findModuleChild((m) => {
        if (typeof m !== 'object')
            return undefined;
        for (let prop in m) {
            if (m[prop]?.prototype?.OK && m[prop]?.prototype?.Cancel && m[prop]?.prototype?.render) {
                return m[prop];
            }
        }
    }));
const ModalModule = findModule((mod) => {
    if (typeof mod !== 'object')
        return false;
    for (let prop in mod) {
        if (Object.keys(mod).length > 4 && mod[prop]?.toString().includes('.ModalPosition,fallback:'))
            return true;
    }
    return false;
});
const ModalModuleProps = ModalModule ? Object.values(ModalModule) : [];
export const SimpleModal = ModalModuleProps.find(prop => {
    const string = prop?.toString();
    return string?.includes(".ShowPortalModal()") && string?.includes(".OnElementReadyCallbacks.Register(");
});
export const ModalPosition = ModalModuleProps.find(prop => prop?.toString().includes(".ModalPosition,fallback:"));
