import { fakeRenderComponent } from '../utils';
import { findModuleChild } from '../webpack';
export const showContextMenu = findModuleChild((m) => {
    if (typeof m !== 'object')
        return undefined;
    for (let prop in m) {
        if (typeof m[prop] === 'function' && m[prop].toString().includes('stopPropagation))')) {
            return m[prop];
        }
    }
});
export const Menu = findModuleChild((m) => {
    if (typeof m !== 'object')
        return undefined;
    for (let prop in m) {
        if (m[prop]?.prototype?.HideIfSubmenu && m[prop]?.prototype?.HideMenu) {
            return m[prop];
        }
    }
});
export const MenuGroup = findModuleChild((m) => {
    if (typeof m !== 'object')
        return undefined;
    for (let prop in m) {
        if ((m[prop]?.toString()?.includes?.('bInGamepadUI:') &&
            fakeRenderComponent(() => m[prop]({ overview: { appid: 7 } }))?.type?.prototype?.RenderSubMenu) ||
            (m[prop]?.prototype?.RenderSubMenu && m[prop]?.prototype?.ShowSubMenu)) {
            return m[prop];
        }
    }
});
export const MenuItem = findModuleChild((m) => {
    if (typeof m !== 'object')
        return undefined;
    for (let prop in m) {
        if (m[prop]?.render?.toString()?.includes('bPlayAudio:') ||
            (m[prop]?.prototype?.OnOKButton && m[prop]?.prototype?.OnMouseEnter)) {
            return m[prop];
        }
    }
});
/*
all().map(m => {
if (typeof m !== "object") return undefined;
for (let prop in m) { if (m[prop]?.prototype?.OK && m[prop]?.prototype?.Cancel && m[prop]?.prototype?.render) return m[prop]}
}).find(x => x)
*/
